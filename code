class Node:
    def __init__(self, data):
        self.left = None  #left child of the node
        self.right = None  #right child of the node
        self.data = data  #data stored in the node

    def insert(self, data):
        #insert a new node into the tree
        if data < self.data:  #data is smaller, go to the left
            if self.left is None:
                self.left = Node(data)
            else:
                self.left.insert(data)
        elif data > self.data:  #data is larger, go to the right
            if self.right is None:
                self.right = Node(data)
            else:
                self.right.insert(data)

    def print_tree_inorder(self):
        #in-order traversal (left, root, right)
        if self.left:
            self.left.print_tree_inorder()  #visit left child
        print(self.data, end=" ")  #print current node's data
        if self.right:
            self.right.print_tree_inorder()  #visit right child

    def print_tree_preorder(self):
        #pre-order traversal (root, left, right)
        print(self.data, end=" ")  #print current node's data
        if self.left:
            self.left.print_tree_preorder()  #visit left child
        if self.right:
            self.right.print_tree_preorder()  #visit right child

    def print_tree_postorder(self):
        #post-order traversal (left, right, root)
        if self.left:
            self.left.print_tree_postorder()  #visit left child
        if self.right:
            self.right.print_tree_postorder()  # visit right child
        print(self.data, end=" ")  # rint current node's data



root = Node(12)  
root.insert(6)   
root.insert(14) 
root.insert(3)   
root.insert(7)   
root.insert(13)  
root.insert(15)  

mazePos = [
    ["07", "17", "27", "37", "47", "57", "67", "77"],
    ["06", "16", "26", "36", "46", "56", "66", "76"],
    ["05", "15", "25", "35", "45", "55", "65", "75"],
    ["04", "14", "24", "34", "44", "54", "64", "74"],
    ["03", "13", "23", "33", "43", "53", "63", "73"],
    ["02", "12", "22", "32", "42", "52", "62", "72"],
    ["01", "11", "21", "31", "41", "51", "61", "71"],
    ["00", "10", "20", "30", "40", "50", "60", "70"]
]

maze = """
+---+---+---+---+---+---+---+---+
|       |                       |
+   +---+   +---+---+   +---+   +                        
|   |           |   |   |       |
+   +   +---+   +   +---+   +---+                              
|       |   |   |               |
+---+   +   +---+   +---+   +---+                              
|       |   |       |   |   |   |
+   +   +   +       +   +   +   +
|   |       |       |   |   |   |
+   +   +   +---+---+   +   +   +
|   |   |                       |
+   +   +---+---+---+---+   +   +
|   |                   |   |   |
+   +   +---+---+   +   +   +   +
| X |           |   |       |   |
+---+---+---+---+---+---+---+---+"""

print("In-order Traversal:")
root.print_tree_inorder() 
print("\n")

print("Pre-order Traversal:")
root.print_tree_preorder()  
print("\n")

print("Post-order Traversal:")
root.print_tree_postorder()  
print("\n")
