class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.center = None
        self.right = None

    def insert(self, data):
        if data < self.data:
            if self.left is None:
                self.left = Node(data)
            else:
                self.left.insert(data)
        elif data == self.data:
            if self.center is None:
                self.center = Node(data)
            else:
                self.center.insert(data)
        else:
            if self.right is None:
                self.right = Node(data)
            else:
                self.right.insert(data)

    def find(self, data):
        if data == self.data:
            return self
        elif data < self.data and self.left:
            return self.left.find(data)
        elif data > self.data and self.right:
            return self.right.find(data)
        return None

    def print_tree(self, prefix="", is_last=True, label=""):
        connector = "└── " if is_last else "├── "
        label_prefix = f"{label}:" if label else ""
        print(prefix + connector + label_prefix + str(self.data))
        prefix += "    " if is_last else "│   "

        children = []
        if self.left: children.append(("L", self.left))
        if self.center: children.append(("C", self.center))
        if self.right: children.append(("R", self.right))

        for i, (lbl, child) in enumerate(children):
            is_last_child = (i == len(children) - 1)
            child.print_tree(prefix, is_last_child, lbl)


# Build the tree
root = Node(0)
root.insert(1)
root.insert(2)
root.insert(3)
root.insert(4)
root.insert(14)
root.insert(13)

node13 = root.find(13)
if node13:
    node13.insert(23)
    node13.insert(22)
    node13.insert(24)

node22 = node13.find(22)
if node22:
    node22.insert(32) 
    node22.insert(42)
    node22.insert(52)
    node22.insert(62)


node24 = node13.find(24)
if node24:
    node24.insert(25)

node52 = node22.find(52)
if node52:
    node52.insert(53)
    node52.insert(54)
    
node62 = node22.find(62)
if node62:
    node62.left = node62.insert(63)
    node62.insert(72)
    
root.insert(15)

# Print the tree
root.print_tree()
